Query Builder Reference
=======================

.. note::

    This document is generated by the PHPCR-ODM from the API, if you wish to contribute a fix please either
    create an issue or make a pull request on the phpcr-odm repository.

Reference
---------

.. _qbref_node_constraintandx:

Node: ConstraintAndx
~~~~~~~~~~~~~~~~~~~~

**Type**: :ref:`constraint <qbref_type_constraint>`

**Extends**: :ref:`ConstraintFactory <qbref_node_constraintfactory>`

**Inherited methods**: :ref:`andX <qbref_method_constraintfactory_andx>`, :ref:`orX <qbref_method_constraintfactory_orx>`, :ref:`fieldExists <qbref_method_constraintfactory_fieldexists>`, :ref:`fullTextSearch <qbref_method_constraintfactory_fulltextsearch>`, :ref:`same <qbref_method_constraintfactory_same>`, :ref:`descendant <qbref_method_constraintfactory_descendant>`, :ref:`child <qbref_method_constraintfactory_child>`, :ref:`not <qbref_method_constraintfactory_not>`, :ref:`eq <qbref_method_constraintfactory_eq>`, :ref:`neq <qbref_method_constraintfactory_neq>`, :ref:`lt <qbref_method_constraintfactory_lt>`, :ref:`lte <qbref_method_constraintfactory_lte>`, :ref:`gt <qbref_method_constraintfactory_gt>`, :ref:`gte <qbref_method_constraintfactory_gte>`, :ref:`like <qbref_method_constraintfactory_like>`

**Children**:
    * **1..*** :ref:`constraint <qbref_type_constraint>`


.. _qbref_node_constraintcomparison:

Node: ConstraintComparison
~~~~~~~~~~~~~~~~~~~~~~~~~~

**Type**: :ref:`constraint <qbref_type_constraint>`

**Extends**: :ref:`OperandFactory <qbref_node_operandfactory>`

**Inherited methods**: :ref:`parameter <qbref_method_operandfactory_parameter>`, :ref:`literal <qbref_method_operandfactory_literal>`, :ref:`fullTextSearchScore <qbref_method_operanddynamicfactory_fulltextsearchscore>`, :ref:`length <qbref_method_operanddynamicfactory_length>`, :ref:`lowerCase <qbref_method_operanddynamicfactory_lowercase>`, :ref:`upperCase <qbref_method_operanddynamicfactory_uppercase>`, :ref:`localName <qbref_method_operanddynamicfactory_localname>`, :ref:`name <qbref_method_operanddynamicfactory_name>`, :ref:`field <qbref_method_operanddynamicfactory_field>`

**Children**:
    * **1..1** :ref:`operand_dynamic <qbref_type_operand_dynamic>`
    * **1..1** :ref:`operand_static <qbref_type_operand_static>`


.. _qbref_node_constraintfactory:

Node: ConstraintFactory
~~~~~~~~~~~~~~~~~~~~~~~

This factory node provides both leaf and factory nodes all of which
return nodes of type "constraint".

**Type**: :ref:`constraint_factory <qbref_type_constraint_factory>`

**Children**:
    * **1..1** :ref:`constraint <qbref_type_constraint>`


.. _qbref_method_constraintfactory_andx:

->andX
^^^^^^

And composite constraint.

.. code-block:: php
    
    <?php
    $qb->where()->andX()
      ->fieldExists('f.foo')
      ->gt()->field('f.max')->literal(40);


The andX node allows you to add 1, 2 or many operand node. When
one operand is added the "and" is removed, when more than one
is added the "and" operands are nested.

.. code-block:: php
    
    <?php
    // when adding only a single operand,
    $qb->where()->andX()->eq()->field('f.foo')->literal('bar');
    // is equivilent to:
    $qb->where()->eq()->field('f.foo')->literal('bar');
    
    
    // when adding more than one,
    $qb->where()->andX()
      ->fieldExists('f.foo')
      ->gt()->field('f.max')->literal(40);
      ->eq()->field('f.zar')->literal('bar')
    
    // is equivilent to:
    $qb->where()->andX()
      ->andX()
        ->fieldExists('f.foo')
        ->gt()->field('f.max')->literal(40);
      ->eq()->field('f.zar')->litreal('bar');


**Type**: *constraint*

**Returns**: :ref:`ConstraintAndx <qbref_node_constraintandx>`

.. _qbref_method_constraintfactory_orx:

->orX
^^^^^

Or composite constraint.

.. code-block:: php
    
    <?php
    $qb->where()
      ->orX()
        ->fieldExsts('prop_1', 'sel_1')
        ->fieldExsts('prop_2', 'sel_1')
      ->end();


As with "andX", "orX" allows one to many operands.

**Type**: *constraint*

**Returns**: :ref:`ConstraintOrx <qbref_node_constraintorx>`

.. _qbref_method_constraintfactory_fieldexists:

->fieldExists
^^^^^^^^^^^^^

Field existance constraint.

.. code-block:: php
    
    <?php
    $qb->where()->fieldExists('prop_1.sel_1');


**Type**: *constraint*

**Returns**: :ref:`ConstraintFactory <qbref_node_constraintfactory>`

**Arguments**:

* **$field**: *string* - Name of field to check, including selector name.

.. _qbref_method_constraintfactory_fulltextsearch:

->fullTextSearch
^^^^^^^^^^^^^^^^

Full text search constraint.

.. code-block:: php
    
    <?php
    $qb->where()->fullTextSearch('sel_1.prop_1', 'search_expression');


See also: http://docs.jboss.org/jbossdna/0.7/manuals/reference/html/jcr-query-and-search.html#fulltext-search-query-language

**Type**: *constraint*

**Returns**: :ref:`ConstraintFactory <qbref_node_constraintfactory>`

**Arguments**:

* **$field**: *string* - Name of field to check, including selector name.
* **$fullTextSearchExpression**: *string* - Search expression.

.. _qbref_method_constraintfactory_same:

->same
^^^^^^

Same document constraint.

.. code-block:: php
    
    <?php
    $qb->where()->same('/path/to/doc', 'sel_1');


Relates to PHPCR QOM SameNodeInterface.

**Type**: *constraint*

**Returns**: :ref:`ConstraintFactory <qbref_node_constraintfactory>`

**Arguments**:

* **$path**: *string* - Path to reference document.
* **$selectorName**: *string* - Name of selector to use.

.. _qbref_method_constraintfactory_descendant:

->descendant
^^^^^^^^^^^^

Descendant document constraint.

.. code-block:: php
    
    <?php
      $qb->where()->descendant('/ancestor/path', 'sel_1');


Relates to PHPCR QOM DescendantNodeInterface

**Type**: *constraint*

**Returns**: :ref:`ConstraintFactory <qbref_node_constraintfactory>`

**Arguments**:

* **$ancestorPath**: *string* - Select descendants of this path.
* **$selectorName**: *string* - Name of selector to use.

.. _qbref_method_constraintfactory_child:

->child
^^^^^^^

Select children of the node at the given path.

.. code-block:: php
    
    <?php
    $qb->where()->child('/parent/path', 'sel_1');


Relates to PHPCR QOM ChildNodeInterface.

**Type**: *constraint*

**Returns**: :ref:`ConstraintFactory <qbref_node_constraintfactory>`

**Arguments**:

* **$parentPath**: *string* - Select children of this path.
* **$selectorName**: *string* - Name of selector to use

.. _qbref_method_constraintfactory_not:

->not
^^^^^

Inverts the truth of any given appended costraint.

.. code-block:: php
    
    <?php
    $qb->where()->not()->fieldExists('sel_1.foobar');


**Type**: *constraint*

**Returns**: :ref:`ConstraintNot <qbref_node_constraintnot>`

.. _qbref_method_constraintfactory_eq:

->eq
^^^^

Equality comparison constraint.

.. code-block:: php
    
    <?php
    $qb->where()
      ->eq()
        ->field('sel_1.foobar')->end()
        ->literal('var_1')->end()
      ->end();


**Type**: *constraint*

**Returns**: :ref:`ConstraintComparison <qbref_node_constraintcomparison>`

.. _qbref_method_constraintfactory_neq:

->neq
^^^^^

Inequality comparison constraint

.. code-block:: php
    
    <?php
    $qb->where()
      ->neq()
        ->field('sel_1.foobar')->end()
        ->literal('var_1')->end()
      ->end();


**Type**: *constraint*

**Returns**: :ref:`ConstraintComparison <qbref_node_constraintcomparison>`

.. _qbref_method_constraintfactory_lt:

->lt
^^^^

Less than comparison constraint.

.. code-block:: php
    
    <?php
    $qb->where()
      ->lt()
        ->field('sel_1.foobar')->end()
        ->literal(5)->end()
      ->end();


**Type**: *constraint*

**Returns**: :ref:`ConstraintComparison <qbref_node_constraintcomparison>`

.. _qbref_method_constraintfactory_lte:

->lte
^^^^^

Less than or equal to comparison constraint.

.. code-block:: php
    
    <?php
    $qb->where()
      ->lte()
        ->field('sel_1.foobar')->end()
        ->literal(5)->end()
      ->end();


**Type**: *constraint*

**Returns**: :ref:`ConstraintComparison <qbref_node_constraintcomparison>`

.. _qbref_method_constraintfactory_gt:

->gt
^^^^

Greater than comparison constraint.

.. code-block:: php
    
    <?php
    $qb->where()
      ->gt()
        ->field('sel_1.foobar')->end()
        ->literal(5)->end()
      ->end();


**Type**: *constraint*

**Returns**: :ref:`ConstraintComparison <qbref_node_constraintcomparison>`

.. _qbref_method_constraintfactory_gte:

->gte
^^^^^

Greater than or equal to comparison constraint.

.. code-block:: php
    
    <?php
    $qb->where()
      ->gte()
        ->field('sel_1.foobar')->end()
        ->literal(5)->end()
      ->end();


**Type**: *constraint*

**Returns**: :ref:`ConstraintComparison <qbref_node_constraintcomparison>`

.. _qbref_method_constraintfactory_like:

->like
^^^^^^

Like comparison constraint.

Use "%" as wildcards.

.. code-block:: php
    
    <?php
    $qb->where()
      ->like()
        ->field('sel_1.foobar')->end()
        ->literal('foo%')->end()
      ->end();


The above example will match "foo" and "foobar" but not "barfoo".

**Type**: *constraint*

**Returns**: :ref:`ConstraintComparison <qbref_node_constraintcomparison>`

.. _qbref_node_constraintnot:

Node: ConstraintNot
~~~~~~~~~~~~~~~~~~~

**Type**: :ref:`constraint <qbref_type_constraint>`

**Extends**: :ref:`ConstraintFactory <qbref_node_constraintfactory>`

**Inherited methods**: :ref:`andX <qbref_method_constraintfactory_andx>`, :ref:`orX <qbref_method_constraintfactory_orx>`, :ref:`fieldExists <qbref_method_constraintfactory_fieldexists>`, :ref:`fullTextSearch <qbref_method_constraintfactory_fulltextsearch>`, :ref:`same <qbref_method_constraintfactory_same>`, :ref:`descendant <qbref_method_constraintfactory_descendant>`, :ref:`child <qbref_method_constraintfactory_child>`, :ref:`not <qbref_method_constraintfactory_not>`, :ref:`eq <qbref_method_constraintfactory_eq>`, :ref:`neq <qbref_method_constraintfactory_neq>`, :ref:`lt <qbref_method_constraintfactory_lt>`, :ref:`lte <qbref_method_constraintfactory_lte>`, :ref:`gt <qbref_method_constraintfactory_gt>`, :ref:`gte <qbref_method_constraintfactory_gte>`, :ref:`like <qbref_method_constraintfactory_like>`

**Children**:
    * **1..1** :ref:`constraint <qbref_type_constraint>`


.. _qbref_node_constraintorx:

Node: ConstraintOrx
~~~~~~~~~~~~~~~~~~~

**Type**: :ref:`constraint <qbref_type_constraint>`

**Extends**: :ref:`ConstraintFactory <qbref_node_constraintfactory>`

**Inherited methods**: :ref:`andX <qbref_method_constraintfactory_andx>`, :ref:`orX <qbref_method_constraintfactory_orx>`, :ref:`fieldExists <qbref_method_constraintfactory_fieldexists>`, :ref:`fullTextSearch <qbref_method_constraintfactory_fulltextsearch>`, :ref:`same <qbref_method_constraintfactory_same>`, :ref:`descendant <qbref_method_constraintfactory_descendant>`, :ref:`child <qbref_method_constraintfactory_child>`, :ref:`not <qbref_method_constraintfactory_not>`, :ref:`eq <qbref_method_constraintfactory_eq>`, :ref:`neq <qbref_method_constraintfactory_neq>`, :ref:`lt <qbref_method_constraintfactory_lt>`, :ref:`lte <qbref_method_constraintfactory_lte>`, :ref:`gt <qbref_method_constraintfactory_gt>`, :ref:`gte <qbref_method_constraintfactory_gte>`, :ref:`like <qbref_method_constraintfactory_like>`

**Children**:
    * **1..*** :ref:`constraint <qbref_type_constraint>`


.. _qbref_node_from:

Node: From
~~~~~~~~~~

**Type**: :ref:`from <qbref_type_from>`

**Children**:
    * **1..1** :ref:`source <qbref_type_source>`


.. _qbref_node_operanddynamicfactory:

Node: OperandDynamicFactory
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Factory node for dynamic operands.

As the name suggests, dynamic operand values change
according to the node being compared and are used as
"left hand side" (lop) operands in comparisons and
in orderings.

**Type**: :ref:`operand_dynamic_factory <qbref_type_operand_dynamic_factory>`

**Children**:
    * **1..1** :ref:`operand_dynamic <qbref_type_operand_dynamic>`


.. _qbref_method_operanddynamicfactory_fulltextsearchscore:

->fullTextSearchScore
^^^^^^^^^^^^^^^^^^^^^

Represents document rank by relevance to the full text search expression 
given by the "fullTextSearch" constraint.

See also: http://www.day.com/specs/jcr/2.0/6_Query.html#FullTextSearchScore

.. code-block:: php
    
    <?php
    $qb->where()
      ->gt()
        ->fullTextSearchScore('sel_1')->end()
        ->literal(50)->end()
      ->end()
    
    $qb->orderBy()
       ->ascending()->fullTextSearchScore('sel_1')->end()


**Type**: *operand_dynamic*

**Returns**: :ref:`OperandDynamicFactory <qbref_node_operanddynamicfactory>`

**Arguments**:

* **$selectorName**: *string* - Name of selector to use

.. _qbref_method_operanddynamicfactory_length:

->length
^^^^^^^^

Length operand resolves to length of child operand.

.. code-block:: php
    
    <?php
    $qb->where()
      ->gt()
        ->length('sel_1.prop_1')->end()
        ->literal(50)->end()
      ->end()
    
    $qb->orderBy()
      ->ascending()->fullTextSearchScore('sel_1')->end()


**Type**: *operand_dynamic*

**Returns**: :ref:`OperandDynamicFactory <qbref_node_operanddynamicfactory>`

**Arguments**:

* **$field**: *string* - name of field to check, including selector name.

.. _qbref_method_operanddynamicfactory_lowercase:

->lowerCase
^^^^^^^^^^^

LowerCase operand evaluates to lower-cased string of child operand:

.. code-block:: php
    
    <?php
    $qb->where()
      ->eq()
        ->lowerCase()->field('sel_1.prop_1')->end()
        ->literal('lower_case')->end()
      ->end()


**Type**: *operand_dynamic*

**Returns**: :ref:`OperandDynamicLowerCase <qbref_node_operanddynamiclowercase>`

.. _qbref_method_operanddynamicfactory_uppercase:

->upperCase
^^^^^^^^^^^

UpperCase operand evaluates to upper-cased string of child operand:

.. code-block:: php
    
    <?php
    $qb->where()
      ->eq()
          ->upperCase()->field('sel_1.prop_1')->end()
          ->literal('UPPER_CASE')->end()
      ->end()


**Type**: *operand_dynamic*

**Returns**: :ref:`OperandDynamicUpperCase <qbref_node_operanddynamicuppercase>`

.. _qbref_method_operanddynamicfactory_localname:

->localName
^^^^^^^^^^^

Document local name resolves to the local (non namespaced)
name of the node being compared.

For example, if a node has the path "/path/to/foobar", then "foobar"
is the local node name.

.. code-block:: php
    
    <?php
    $qb->where()
      ->eq()
        ->localName('sel_1')
        ->literal('my_node_name')
      ->end()


Relates to PHPCR NodeLocalNameInterface

**Type**: *operand_dynamic*

**Returns**: :ref:`OperandDynamicFactory <qbref_node_operanddynamicfactory>`

**Arguments**:

* **$selectorName**: *string* - Name of selector to use

.. _qbref_method_operanddynamicfactory_name:

->name
^^^^^^

Resolves to the namespaced name of the node being compared.

For example, if a node has the path "/path/to/bar:foobar", then 
"bar:foobar" is the namespaced node name.

.. code-block:: php
    
    <?php
    $qb->where()
      ->eq()
        ->name('sel_1')
        ->literal('namespace:my_node_name')
      ->end()


Relates to PHPCR NodeNameInterface.

**Type**: *operand_dynamic*

**Returns**: :ref:`OperandDynamicFactory <qbref_node_operanddynamicfactory>`

**Arguments**:

* **$selectorName**: *string* - Name of selector to use

.. _qbref_method_operanddynamicfactory_field:

->field
^^^^^^^

Resolves to the value of the specified field.

.. code-block:: php
    
    <?php
    $qb->where()
      ->eq()
        ->field('sel_1.prop_name')
        ->literal('my_field_value')
      ->end()


**Type**: *operand_dynamic*

**Returns**: :ref:`OperandDynamicFactory <qbref_node_operanddynamicfactory>`

**Arguments**:

* **$field**: *string* - name of field to check, including selector name.

.. _qbref_node_operanddynamiclowercase:

Node: OperandDynamicLowerCase
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Type**: :ref:`operand_dynamic <qbref_type_operand_dynamic>`

**Extends**: :ref:`OperandDynamicFactory <qbref_node_operanddynamicfactory>`

**Inherited methods**: :ref:`fullTextSearchScore <qbref_method_operanddynamicfactory_fulltextsearchscore>`, :ref:`length <qbref_method_operanddynamicfactory_length>`, :ref:`lowerCase <qbref_method_operanddynamicfactory_lowercase>`, :ref:`upperCase <qbref_method_operanddynamicfactory_uppercase>`, :ref:`localName <qbref_method_operanddynamicfactory_localname>`, :ref:`name <qbref_method_operanddynamicfactory_name>`, :ref:`field <qbref_method_operanddynamicfactory_field>`

**Children**:
    * **1..1** :ref:`operand_dynamic <qbref_type_operand_dynamic>`


.. _qbref_node_operanddynamicuppercase:

Node: OperandDynamicUpperCase
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Type**: :ref:`operand_dynamic <qbref_type_operand_dynamic>`

**Extends**: :ref:`OperandDynamicFactory <qbref_node_operanddynamicfactory>`

**Inherited methods**: :ref:`fullTextSearchScore <qbref_method_operanddynamicfactory_fulltextsearchscore>`, :ref:`length <qbref_method_operanddynamicfactory_length>`, :ref:`lowerCase <qbref_method_operanddynamicfactory_lowercase>`, :ref:`upperCase <qbref_method_operanddynamicfactory_uppercase>`, :ref:`localName <qbref_method_operanddynamicfactory_localname>`, :ref:`name <qbref_method_operanddynamicfactory_name>`, :ref:`field <qbref_method_operanddynamicfactory_field>`

**Children**:
    * **1..1** :ref:`operand_dynamic <qbref_type_operand_dynamic>`


.. _qbref_node_operandfactory:

Node: OperandFactory
~~~~~~~~~~~~~~~~~~~~

Factory/node class for dynamic all operands.

Extends OperandDynamicFactory, and adds the static operands.

Traits would be really useful here.

**Type**: :ref:`operand_dynamic_factory <qbref_type_operand_dynamic_factory>`

**Extends**: :ref:`OperandDynamicFactory <qbref_node_operanddynamicfactory>`

**Inherited methods**: :ref:`fullTextSearchScore <qbref_method_operanddynamicfactory_fulltextsearchscore>`, :ref:`length <qbref_method_operanddynamicfactory_length>`, :ref:`lowerCase <qbref_method_operanddynamicfactory_lowercase>`, :ref:`upperCase <qbref_method_operanddynamicfactory_uppercase>`, :ref:`localName <qbref_method_operanddynamicfactory_localname>`, :ref:`name <qbref_method_operanddynamicfactory_name>`, :ref:`field <qbref_method_operanddynamicfactory_field>`

**Children**:
    * **1..1** :ref:`operand_dynamic <qbref_type_operand_dynamic>`


.. _qbref_method_operandfactory_parameter:

->parameter
^^^^^^^^^^^

Resolves to the value of the variable bound to the given $name.

Relates to PHPCR BindVariableValueInterface

.. code-block:: php
    
    <?php
    $qb->where()->eq()->field('f.foobar')->parameter('param_1');


**Type**: *operand_static*

**Returns**: :ref:`OperandFactory <qbref_node_operandfactory>`

**Arguments**:

* **$name**: *string* - Name of parameter to resolve.

.. _qbref_method_operandfactory_literal:

->literal
^^^^^^^^^

Resolves to the given literal value.

.. code-block:: php
    
    <?php
    $qb->where()->eq()->field('f.foobar')->litreal('Literal Value');


**Type**: *operand_static*

**Returns**: :ref:`OperandStaticLiteral <qbref_node_operandstaticliteral>`

**Arguments**:

* **$value**: *string* - Literal value.

.. _qbref_node_operandstaticfactory:

Node: OperandStaticFactory
~~~~~~~~~~~~~~~~~~~~~~~~~~

Factory/node class for static operands.

As the name suggests, static operand values do
not change once initialized and are used as the "right hand
side" operands in comparisons.

Inherits from dynamic factory, see note there.

**Type**: :ref:`operand_static_factory <qbref_type_operand_static_factory>`

**Extends**: :ref:`OperandFactory <qbref_node_operandfactory>`

**Inherited methods**: :ref:`parameter <qbref_method_operandfactory_parameter>`, :ref:`literal <qbref_method_operandfactory_literal>`, :ref:`fullTextSearchScore <qbref_method_operanddynamicfactory_fulltextsearchscore>`, :ref:`length <qbref_method_operanddynamicfactory_length>`, :ref:`lowerCase <qbref_method_operanddynamicfactory_lowercase>`, :ref:`upperCase <qbref_method_operanddynamicfactory_uppercase>`, :ref:`localName <qbref_method_operanddynamicfactory_localname>`, :ref:`name <qbref_method_operanddynamicfactory_name>`, :ref:`field <qbref_method_operanddynamicfactory_field>`

**Children**:
    * **1..1** :ref:`operand_static <qbref_type_operand_static>`


.. _qbref_node_orderby:

Node: OrderBy
~~~~~~~~~~~~~

Factory/node class for order by.

Query results can be ordered by any dynamic operand
in either ascending or descending order.

**Type**: :ref:`order_by <qbref_type_order_by>`

**Children**:
    * **0..*** :ref:`ordering <qbref_type_ordering>`


.. _qbref_method_orderby_ascending:

->ascending
^^^^^^^^^^^

Add ascending ordering:

.. code-block:: php
    
    <?php
    $qb->orderBy()->ascending()->field('sel_1.prop_1');


**Type**: *ordering*

**Returns**: :ref:`Ordering <qbref_node_ordering>`

.. _qbref_node_orderbyadd:

Node: OrderByAdd
~~~~~~~~~~~~~~~~

**Type**: :ref:`order_by <qbref_type_order_by>`

**Extends**: :ref:`OrderBy <qbref_node_orderby>`

**Inherited methods**: :ref:`ascending <qbref_method_orderby_ascending>`

**Children**:
    * **0..*** :ref:`ordering <qbref_type_ordering>`


.. _qbref_node_ordering:

Node: Ordering
~~~~~~~~~~~~~~

**Type**: :ref:`ordering <qbref_type_ordering>`

**Extends**: :ref:`OperandDynamicFactory <qbref_node_operanddynamicfactory>`

**Inherited methods**: :ref:`fullTextSearchScore <qbref_method_operanddynamicfactory_fulltextsearchscore>`, :ref:`length <qbref_method_operanddynamicfactory_length>`, :ref:`lowerCase <qbref_method_operanddynamicfactory_lowercase>`, :ref:`upperCase <qbref_method_operanddynamicfactory_uppercase>`, :ref:`localName <qbref_method_operanddynamicfactory_localname>`, :ref:`name <qbref_method_operanddynamicfactory_name>`, :ref:`field <qbref_method_operanddynamicfactory_field>`

**Children**:
    * **1..1** :ref:`operand_dynamic <qbref_type_operand_dynamic>`


.. _qbref_node_querybuilder:

Node: QueryBuilder
~~~~~~~~~~~~~~~~~~

Base QueryBuilder node.

**Type**: :ref:`builder <qbref_type_builder>`

**Children**:
    * **0..*** :ref:`select <qbref_type_select>`
    * **1..1** :ref:`from <qbref_type_from>`
    * **0..1** :ref:`where <qbref_type_where>`
    * **0..*** :ref:`order_by <qbref_type_order_by>`


.. _qbref_method_querybuilder_where:

->where
^^^^^^^

Where factory node is used to specify selection criteria:

.. code-block:: php
    
    <?php
     $qb->where()
       ->eq()->field('a.foobar')->literal('bar')->end()


**Type**: *where*

**Returns**: :ref:`Where <qbref_node_where>`

.. _qbref_method_querybuilder_andwhere:

->andWhere
^^^^^^^^^^

Add additional selection criteria using the AND operator.

**Type**: *where*

**Returns**: :ref:`WhereAnd <qbref_node_whereand>`

.. _qbref_method_querybuilder_orwhere:

->orWhere
^^^^^^^^^

Add additional selection criteria using the OR operator. 
see "where"

**Type**: *where*

**Returns**: :ref:`WhereOr <qbref_node_whereor>`

.. _qbref_method_querybuilder_from:

->from
^^^^^^

Set the from source for the query.

.. code-block:: php
    
    <?php
     $qb->from()->document('Foobar', 'a')
    
     // or with a join ...
    
     -$qb->from()->joinInner()
       ->left()->document('Foobar', 'a')->end()
       ->right()->document('Foobar', 'a')->end()
     ->end()


**Type**: *from*

**Returns**: :ref:`From <qbref_node_from>`

.. _qbref_method_querybuilder_fromdocument:

->fromDocument
^^^^^^^^^^^^^^

Shortcut for:

.. code-block:: php
    
    <?php
    $qb->from()->document('Foobar', 'a')->end()


Which becomes:

.. code-block:: php
    
    <?php
    $qb->fromDocument('Foobar', 'a');


Replaces any existing from source.

**Type**: *from*

**Returns**: :ref:`QueryBuilder <qbref_node_querybuilder>`

**Arguments**:

* **$documentFqn**: *string* - Fully qualified class name for document.
* **$selectorName**: *string* - Selector name.

.. _qbref_method_querybuilder_addjoinleftouter:

->addJoinLeftOuter
^^^^^^^^^^^^^^^^^^

Replace the existing source with a left outer join source using the existing
source as the left operand.

.. code-block:: php
    
    <?php
    $qb->fromDocument('Foobar', 'a')
    ->addJoinLeftOuter()
      ->right()->document('Barfoo', 'b')->end()
      ->condition()->equi('a.prop_1', 'b.prop_2')
    ->end();


**Type**: *select*

**Returns**: :ref:`SourceJoin <qbref_node_sourcejoin>`

.. _qbref_method_querybuilder_addjoinrightouter:

->addJoinRightOuter
^^^^^^^^^^^^^^^^^^^

Replace the existing source with a right outer join source using the existing
source as the left operand.

.. code-block:: php
    
    <?php
    $qb->fromDocument('Foobar', 'a')
      ->addJoinRightOuter()
        ->right()->document('Barfoo', 'b')->end()
        ->condition()->equi('a.prop_1', 'b.prop_2')
      ->end()


**Type**: *select*

**Returns**: :ref:`SourceJoin <qbref_node_sourcejoin>`

.. _qbref_method_querybuilder_addjoininner:

->addJoinInner
^^^^^^^^^^^^^^

Replace the existing source with an inner join source using the existing
source as the left operand.

.. code-block:: php
    
    <?php
    $qb->fromDocument('Foobar', 'a')
    ->addJoinInner()
      ->right()->document('Barfoo', 'b')->end()
      ->condition()->equi('a.prop_1', 'b.prop_2')
    ->end()


**Type**: *select*

**Returns**: :ref:`SourceJoin <qbref_node_sourcejoin>`

.. _qbref_method_querybuilder_select:

->select
^^^^^^^^

Method to add properties for selection to builder tree, replaces any 
existing select.

Number of property nodes is unbounded.

.. code-block:: php
    
    <?php
    $qb->select()
      ->field('a.prop_1')
      ->field('a.prop_2')
      ->field('a.prop_3')
    ->end()


**Type**: *select*

**Returns**: :ref:`Select <qbref_node_select>`

.. _qbref_method_querybuilder_addselect:

->addSelect
^^^^^^^^^^^

Add additional properties to selection.

.. code-block:: php
    
    <?php
    $qb->select()
        ->field('a.prop_1')
      ->end()
      ->addSelect()
        ->field('a.prop_2')
        ->field('a.prop_3')
        ->field('a.prop_4')
      ->end()


**Type**: *select*

**Returns**: :ref:`SelectAdd <qbref_node_selectadd>`

.. _qbref_method_querybuilder_orderby:

->orderBy
^^^^^^^^^

Add orderings to the builder tree.

Number of orderings is unbounded.

.. code-block:: php
    
    <?php
    $qb->orderBy()
        ->ascending()->field('a.prop_1')
        ->descending()->field('a.prop_2')
      ->end()


**Type**: *order_by*

**Returns**: :ref:`OrderBy <qbref_node_orderby>`

.. _qbref_method_querybuilder_addorderby:

->addOrderBy
^^^^^^^^^^^^

Add additional orderings to the builder tree.

See "orderBy"

**Type**: *order_by*

**Returns**: :ref:`OrderByAdd <qbref_node_orderbyadd>`

.. _qbref_node_select:

Node: Select
~~~~~~~~~~~~

**Type**: :ref:`select <qbref_type_select>`

**Children**:
    * **0..*** :ref:`property <qbref_type_property>`


.. _qbref_node_selectadd:

Node: SelectAdd
~~~~~~~~~~~~~~~

**Type**: :ref:`select <qbref_type_select>`

**Extends**: :ref:`Select <qbref_node_select>`

**Inherited methods**: 

**Children**:
    * **0..*** :ref:`property <qbref_type_property>`


.. _qbref_node_sourcejoin:

Node: SourceJoin
~~~~~~~~~~~~~~~~

$from->joinInner()->left()->document()->

**Type**: :ref:`source <qbref_type_source>`

**Children**:
    * **1..1** :ref:`source_join_condition_factory <qbref_type_source_join_condition_factory>`
    * **1..1** :ref:`source_join_left <qbref_type_source_join_left>`
    * **1..1** :ref:`source_join_right <qbref_type_source_join_right>`


.. _qbref_node_sourcejoinconditionfactory:

Node: SourceJoinConditionFactory
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Factory/node class for join conditions.

**Type**: :ref:`source_join_condition_factory <qbref_type_source_join_condition_factory>`

**Children**:
    * **1..1** :ref:`source_join_condition <qbref_type_source_join_condition>`


.. _qbref_method_sourcejoinconditionfactory_descendant:

->descendant
^^^^^^^^^^^^

Descendant join condition.

.. code-block:: php
    
    <?php
    $qb->from()
      ->joinInner()
        ->left()->document('Foo/Bar/One', 'sel_1')->end()
        ->right()->document('Foo/Bar/Two', 'sel_2')->end()
        ->condition()
          ->descendant('sel_1', 'sel_2')
        ->end()
      ->end()


**Type**: *source_join_condition*

**Returns**: :ref:`SourceJoinConditionFactory <qbref_node_sourcejoinconditionfactory>`

**Arguments**:

* **$descendantSelectorName**: *string* - Name of selector for descendant documents.
* **$ancestorSelectorName**: *string* - Name of selector to match for ancestor documents.

.. _qbref_method_sourcejoinconditionfactory_equi:

->equi
^^^^^^

Equi (equality) join condition.

.. code-block:: php
    
    <?php
    $qb->from()
      ->joinInner()
        ->left()->document('Foo/Bar/One', 'sel_1')->end()
        ->right()->document('Foo/Bar/Two', 'sel_2')->end()
        ->condition()
          ->equi('sel_1.prop_1', 'sel_2.prop_2')
        ->end()
      ->end()


**Type**: *source_join_condition*

**Returns**: :ref:`SourceJoinConditionFactory <qbref_node_sourcejoinconditionfactory>`

**Arguments**:

* **$field1**: *string* - Field name for first field.
* **$field2**: *string* - Field name for second field.

.. _qbref_method_sourcejoinconditionfactory_child:

->child
^^^^^^^

Child document join condition.

.. code-block:: php
    
    <?php
    $qb->from()
      ->joinInner()
        ->left()->document('Foo/Bar/One', 'sel_1')->end()
        ->right()->document('Foo/Bar/Two', 'sel_2')->end()
        ->condition()
          ->child('sel_1', 'sel_2')
        ->end()
      ->end()


**Type**: *source_join_condition*

**Returns**: :ref:`SourceJoinConditionFactory <qbref_node_sourcejoinconditionfactory>`

**Arguments**:

* **$childSelectorName**: *string* - Name of selector for child documents.
* **$parentSelectorName**: *string* - Name of selector to match for parent documents.

.. _qbref_method_sourcejoinconditionfactory_same:

->same
^^^^^^

Same document join condition:

.. code-block:: php
    
    <?php
      $qb->from()
        ->joinInner()
          ->left()->document('Foo/Bar/One', 'sel_1')->end()
          ->right()->document('Foo/Bar/Two', 'sel_2')->end()
          ->condition()
            ->same('sel_1', 'sel_2', '/path_to/sel_2/document')
          ->end()
        ->end()


**Type**: *source_join_condition*

**Returns**: :ref:`SourceJoinConditionFactory <qbref_node_sourcejoinconditionfactory>`

**Arguments**:

* **$selector1Name**: *string* - Name of first selector.
* **$selector2Name**: *string* - Name of first selector.
* **$selector2Path**: *string* - Path for documents of second selector.

.. _qbref_node_sourcejoinleft:

Node: SourceJoinLeft
~~~~~~~~~~~~~~~~~~~~

**Type**: :ref:`source_join_left <qbref_type_source_join_left>`

**Extends**: :ref:`From <qbref_node_from>`

**Inherited methods**: :ref:`document <qbref_method_sourcefactory_document>`, :ref:`joinInner <qbref_method_sourcefactory_joininner>`, :ref:`joinLeftOuter <qbref_method_sourcefactory_joinleftouter>`, :ref:`joinRightOuter <qbref_method_sourcefactory_joinrightouter>`

**Children**:
    * **1..1** :ref:`source <qbref_type_source>`


.. _qbref_node_sourcejoinright:

Node: SourceJoinRight
~~~~~~~~~~~~~~~~~~~~~

**Type**: :ref:`source_join_right <qbref_type_source_join_right>`

**Extends**: :ref:`From <qbref_node_from>`

**Inherited methods**: :ref:`document <qbref_method_sourcefactory_document>`, :ref:`joinInner <qbref_method_sourcefactory_joininner>`, :ref:`joinLeftOuter <qbref_method_sourcefactory_joinleftouter>`, :ref:`joinRightOuter <qbref_method_sourcefactory_joinrightouter>`

**Children**:
    * **1..1** :ref:`source <qbref_type_source>`


.. _qbref_node_where:

Node: Where
~~~~~~~~~~~

**Type**: :ref:`where <qbref_type_where>`

**Extends**: :ref:`ConstraintFactory <qbref_node_constraintfactory>`

**Inherited methods**: :ref:`andX <qbref_method_constraintfactory_andx>`, :ref:`orX <qbref_method_constraintfactory_orx>`, :ref:`fieldExists <qbref_method_constraintfactory_fieldexists>`, :ref:`fullTextSearch <qbref_method_constraintfactory_fulltextsearch>`, :ref:`same <qbref_method_constraintfactory_same>`, :ref:`descendant <qbref_method_constraintfactory_descendant>`, :ref:`child <qbref_method_constraintfactory_child>`, :ref:`not <qbref_method_constraintfactory_not>`, :ref:`eq <qbref_method_constraintfactory_eq>`, :ref:`neq <qbref_method_constraintfactory_neq>`, :ref:`lt <qbref_method_constraintfactory_lt>`, :ref:`lte <qbref_method_constraintfactory_lte>`, :ref:`gt <qbref_method_constraintfactory_gt>`, :ref:`gte <qbref_method_constraintfactory_gte>`, :ref:`like <qbref_method_constraintfactory_like>`

**Children**:
    * **1..1** :ref:`constraint <qbref_type_constraint>`


.. _qbref_node_whereand:

Node: WhereAnd
~~~~~~~~~~~~~~

Append an additional "where" with an AND

**Type**: :ref:`where <qbref_type_where>`

**Extends**: :ref:`Where <qbref_node_where>`

**Inherited methods**: :ref:`andX <qbref_method_constraintfactory_andx>`, :ref:`orX <qbref_method_constraintfactory_orx>`, :ref:`fieldExists <qbref_method_constraintfactory_fieldexists>`, :ref:`fullTextSearch <qbref_method_constraintfactory_fulltextsearch>`, :ref:`same <qbref_method_constraintfactory_same>`, :ref:`descendant <qbref_method_constraintfactory_descendant>`, :ref:`child <qbref_method_constraintfactory_child>`, :ref:`not <qbref_method_constraintfactory_not>`, :ref:`eq <qbref_method_constraintfactory_eq>`, :ref:`neq <qbref_method_constraintfactory_neq>`, :ref:`lt <qbref_method_constraintfactory_lt>`, :ref:`lte <qbref_method_constraintfactory_lte>`, :ref:`gt <qbref_method_constraintfactory_gt>`, :ref:`gte <qbref_method_constraintfactory_gte>`, :ref:`like <qbref_method_constraintfactory_like>`

**Children**:
    * **1..1** :ref:`constraint <qbref_type_constraint>`


.. _qbref_node_whereor:

Node: WhereOr
~~~~~~~~~~~~~

Append an additional "where" with an OR

**Type**: :ref:`where <qbref_type_where>`

**Extends**: :ref:`Where <qbref_node_where>`

**Inherited methods**: :ref:`andX <qbref_method_constraintfactory_andx>`, :ref:`orX <qbref_method_constraintfactory_orx>`, :ref:`fieldExists <qbref_method_constraintfactory_fieldexists>`, :ref:`fullTextSearch <qbref_method_constraintfactory_fulltextsearch>`, :ref:`same <qbref_method_constraintfactory_same>`, :ref:`descendant <qbref_method_constraintfactory_descendant>`, :ref:`child <qbref_method_constraintfactory_child>`, :ref:`not <qbref_method_constraintfactory_not>`, :ref:`eq <qbref_method_constraintfactory_eq>`, :ref:`neq <qbref_method_constraintfactory_neq>`, :ref:`lt <qbref_method_constraintfactory_lt>`, :ref:`lte <qbref_method_constraintfactory_lte>`, :ref:`gt <qbref_method_constraintfactory_gt>`, :ref:`gte <qbref_method_constraintfactory_gte>`, :ref:`like <qbref_method_constraintfactory_like>`

**Children**:
    * **1..1** :ref:`constraint <qbref_type_constraint>`


