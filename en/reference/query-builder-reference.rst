Query Builder Reference
=======================

.. note::

    This is document is generated by the PHPCR-ODM

Node Type Index
---------------

.. _qbref_type_operand_dynamic:

Operand dynamic
~~~~~~~~~~~~~~~

* :ref:`OperandDynamicName <qbref_node_operanddynamicname>`
* :ref:`OperandDynamicLocalName <qbref_node_operanddynamiclocalname>`
* :ref:`OperandDynamicLowerCase <qbref_node_operanddynamiclowercase>`
* :ref:`OperandDynamicField <qbref_node_operanddynamicfield>`
* :ref:`OperandDynamicUpperCase <qbref_node_operanddynamicuppercase>`
* :ref:`OperandDynamicLength <qbref_node_operanddynamiclength>`
* :ref:`OperandDynamicFullTextSearchScore <qbref_node_operanddynamicfulltextsearchscore>`

.. _qbref_type_where:

Where
~~~~~

* :ref:`WhereOr <qbref_node_whereor>`
* :ref:`Where <qbref_node_where>`
* :ref:`WhereAnd <qbref_node_whereand>`

.. _qbref_type_select:

Select
~~~~~~

* :ref:`SelectAdd <qbref_node_selectadd>`
* :ref:`Select <qbref_node_select>`

.. _qbref_type_order_by:

Order by
~~~~~~~~

* :ref:`OrderByAdd <qbref_node_orderbyadd>`
* :ref:`OrderBy <qbref_node_orderby>`

.. _qbref_type_source_join_condition_factory:

Source join condition factory
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* :ref:`SourceJoinConditionFactory <qbref_node_sourcejoinconditionfactory>`

.. _qbref_type_operand_dynamic_factory:

Operand dynamic factory
~~~~~~~~~~~~~~~~~~~~~~~

* :ref:`OperandDynamicFactory <qbref_node_operanddynamicfactory>`
* :ref:`OperandFactory <qbref_node_operandfactory>`

.. _qbref_type_constraint:

Constraint
~~~~~~~~~~

* :ref:`ConstraintSame <qbref_node_constraintsame>`
* :ref:`ConstraintDescendant <qbref_node_constraintdescendant>`
* :ref:`ConstraintNot <qbref_node_constraintnot>`
* :ref:`ConstraintComparison <qbref_node_constraintcomparison>`
* :ref:`ConstraintFieldExists <qbref_node_constraintfieldexists>`
* :ref:`ConstraintFullTextSearch <qbref_node_constraintfulltextsearch>`
* :ref:`ConstraintChild <qbref_node_constraintchild>`
* :ref:`ConstraintOrx <qbref_node_constraintorx>`
* :ref:`ConstraintAndx <qbref_node_constraintandx>`

.. _qbref_type_source_join_condition:

Source join condition
~~~~~~~~~~~~~~~~~~~~~

* :ref:`SourceJoinConditionSameDocument <qbref_node_sourcejoinconditionsamedocument>`
* :ref:`SourceJoinConditionDescendant <qbref_node_sourcejoinconditiondescendant>`
* :ref:`SourceJoinConditionChildDocument <qbref_node_sourcejoinconditionchilddocument>`
* :ref:`SourceJoinConditionEqui <qbref_node_sourcejoinconditionequi>`

.. _qbref_type_source:

Source
~~~~~~

* :ref:`SourceJoin <qbref_node_sourcejoin>`
* :ref:`SourceDocument <qbref_node_sourcedocument>`

.. _qbref_type_from:

From
~~~~

* :ref:`From <qbref_node_from>`

.. _qbref_type_builder:

Builder
~~~~~~~

* :ref:`QueryBuilder <qbref_node_querybuilder>`

.. _qbref_type_constraint_factory:

Constraint factory
~~~~~~~~~~~~~~~~~~

* :ref:`ConstraintFactory <qbref_node_constraintfactory>`

.. _qbref_type_operand_static_factory:

Operand static factory
~~~~~~~~~~~~~~~~~~~~~~

* :ref:`OperandStaticFactory <qbref_node_operandstaticfactory>`

.. _qbref_type_ordering:

Ordering
~~~~~~~~

* :ref:`Ordering <qbref_node_ordering>`

.. _qbref_type_operand_static:

Operand static
~~~~~~~~~~~~~~

* :ref:`OperandStaticLiteral <qbref_node_operandstaticliteral>`
* :ref:`OperandStaticParameter <qbref_node_operandstaticparameter>`

.. _qbref_type_property:

Property
~~~~~~~~

* :ref:`Field <qbref_node_field>`

.. _qbref_type_source_join_right:

Source join right
~~~~~~~~~~~~~~~~~

* :ref:`SourceJoinRight <qbref_node_sourcejoinright>`

.. _qbref_type_source_join_left:

Source join left
~~~~~~~~~~~~~~~~

* :ref:`SourceJoinLeft <qbref_node_sourcejoinleft>`

Reference
---------

.. _qbref_node_whereor:

WhereOr
~~~~~~~

  Append an additional "where" with an OR

* **Type**: :ref:`where <qbref_type_where>`
* **Extends**: :ref:`Where <qbref_node_where>`
* **Children**:
    * **1..1** :ref:`constraint <qbref_type_constraint>`

.. _qbref_node_selectadd:

SelectAdd
~~~~~~~~~

  

* **Type**: :ref:`select <qbref_type_select>`
* **Extends**: :ref:`Select <qbref_node_select>`
* **Children**:
    * **0..*** :ref:`property <qbref_type_property>`

.. _qbref_node_where:

Where
~~~~~

  

* **Type**: :ref:`where <qbref_type_where>`
* **Extends**: :ref:`ConstraintFactory <qbref_node_constraintfactory>`
* **Children**:
    * **1..1** :ref:`constraint <qbref_type_constraint>`

.. _qbref_node_orderbyadd:

OrderByAdd
~~~~~~~~~~

  

* **Type**: :ref:`order_by <qbref_type_order_by>`
* **Extends**: :ref:`OrderBy <qbref_node_orderby>`
* **Children**:
    * **0..*** :ref:`ordering <qbref_type_ordering>`

.. _qbref_node_sourcejoinconditionfactory:

SourceJoinConditionFactory
~~~~~~~~~~~~~~~~~~~~~~~~~~

  Factory/node class for join conditions.

* **Type**: :ref:`source_join_condition_factory <qbref_type_source_join_condition_factory>`
* **Children**:
    * **1..1** :ref:`source_join_condition <qbref_type_source_join_condition>`

->descendant
^^^^^^^^^^^^

Arguments:

* **$descendantSelectorName**: Description of arg.
* **$ancestorSelectorName**: Description of arg.

    Descendant join condition:
    
.. code-block:: php
    
    <?php
          $qb->from()
            ->joinInner()
              ->left()->document('Foo/Bar/One', 'sel_1')->end()
              ->right()->document('Foo/Bar/Two', 'sel_2')->end()
              ->condition()
                ->descendant('sel_1', 'sel_2')
              ->end()
            ->end()


->equi
^^^^^^

Arguments:

* **$field1**: Description of arg.
* **$field2**: Description of arg.

    Equi (equality) join condition:
    
.. code-block:: php
    
    <?php
          $qb->from()
            ->joinInner()
              ->left()->document('Foo/Bar/One', 'sel_1')->end()
              ->right()->document('Foo/Bar/Two', 'sel_2')->end()
              ->condition()
                ->equi('sel_1.prop_1', 'sel_2.prop_2')
              ->end()
            ->end()


->child
^^^^^^^

Arguments:

* **$childSelectorName**: Description of arg.
* **$parentSelectorName**: Description of arg.

    Child document join condition:
    
.. code-block:: php
    
    <?php
          $qb->from()
            ->joinInner()
              ->left()->document('Foo/Bar/One', 'sel_1')->end()
              ->right()->document('Foo/Bar/Two', 'sel_2')->end()
              ->condition()
                ->child('sel_1', 'sel_2')
              ->end()
            ->end()


->same
^^^^^^

Arguments:

* **$selector1Name**: Description of arg.
* **$selector2Name**: Description of arg.
* **$selector2Path**: Description of arg.

    Same document join condition:
    
.. code-block:: php
    
    <?php
          $qb->from()
            ->joinInner()
              ->left()->document('Foo/Bar/One', 'sel_1')->end()
              ->right()->document('Foo/Bar/Two', 'sel_2')->end()
              ->condition()
                ->same('sel_1', 'sel_2', '/path_to/sel_2/document')
              ->end()
            ->end()


.. _qbref_node_orderby:

OrderBy
~~~~~~~

  Factory/node class for order by.
  
  Query results can be ordered by any dynamic operand
  in either ascending or descending order.

* **Type**: :ref:`order_by <qbref_type_order_by>`
* **Children**:
    * **0..*** :ref:`ordering <qbref_type_ordering>`

->ascending
^^^^^^^^^^^

    Add ascending ordering:
    
.. code-block:: php
    
    <?php
          $qb->orderBy()
            ->ascending()->propertyValue('prop_1', 'sel_1')->end()


->descending
^^^^^^^^^^^^

    Add descending ordering:
    
.. code-block:: php
    
    <?php
          $qb->orderBy()
            ->descending()->propertyValue('prop_1', 'sel_1')->end()


.. _qbref_node_operanddynamicfactory:

OperandDynamicFactory
~~~~~~~~~~~~~~~~~~~~~

  Factory/node class for dynamic operands.
  
  As the name suggests, dynamic operand values change
  according to the node being compared and are used as
  "left hand side" (lop) operands in comparisons and
  in orderings.

* **Type**: :ref:`operand_dynamic_factory <qbref_type_operand_dynamic_factory>`
* **Children**:
    * **1..1** :ref:`operand_dynamic <qbref_type_operand_dynamic>`

->fullTextSearchScore
^^^^^^^^^^^^^^^^^^^^^

Arguments:

* **$selectorName**: Description of arg.

    Full text search score operand:
    
.. code-block:: php
    
    <?php
          $qb->where()
            ->gt()
              ->lop()->fullTextSearchScore('sel_1')->end()
              ->rop()->literal(50)->end()
            ->end()
        
          $qb->orderBy()
            ->ascending()->fullTextSearchScore('sel_1')->end()


->length
^^^^^^^^

Arguments:

* **$field**: Description of arg.

    Length operand resolves to length of child operand:
    
.. code-block:: php
    
    <?php
          $qb->where()
            ->gt()
              ->lop()->length('sel_1', 'prop_1')->end()
              ->rop()->literal(50)->end()
            ->end()
        
          $qb->orderBy()
            ->ascending()->fullTextSearchScore('sel_1')->end()


->lowerCase
^^^^^^^^^^^

    LowerCase operand evaluates to lower-cased string of child operand:
    
.. code-block:: php
    
    <?php
          $qb->where()
            ->eq()
              ->lop()
                ->lowerCase()->propertyValue('prop_1', 'sel_1')->end()
              ->end()
              ->rop()->literal('lower_case')->end()
            ->end()


->upperCase
^^^^^^^^^^^

    UpperCase operand evaluates to upper-cased string of child operand:
    
.. code-block:: php
    
    <?php
          $qb->where()
            ->eq()
              ->lop()
                ->upperCase()->propertyValue('prop_1', 'sel_1')->end()
              ->end()
              ->rop()->literal('UPPER_CASE')->end()
            ->end()


->localName
^^^^^^^^^^^

Arguments:

* **$selectorName**: Description of arg.

    Document local name resolves to the local (non namespaced)
    name of the node being compared:
    
.. code-block:: php
    
    <?php
          $qb->where()
            ->eq()
              ->lop()->documentLocalName('sel_1')->end()
              ->rop()->literal('my_node_name')
            ->end()

    
    Relates to PHPCR NodeLocalNameInterface

->name
^^^^^^

Arguments:

* **$selectorName**: Description of arg.

    Resolves to the namespaced
    name of the node being compared:
    
.. code-block:: php
    
    <?php
          $qb->where()
            ->eq()
              ->lop()->documentName('sel_1')->end()
              ->rop()->literal('namespace:my_node_name')
            ->end()

    
    Relates to PHPCR NodeNameInterface

->field
^^^^^^^

Arguments:

* **$field**: Description of arg.

    Resolves to the value of the specified property
    
.. code-block:: php
    
    <?php
          $qb->where()
            ->eq()
              ->lop()->propertyValue('prop_name', 'sel_1')->end()
              ->rop()->literal('my_property_value')
            ->end()


.. _qbref_node_operanddynamiclowercase:

OperandDynamicLowerCase
~~~~~~~~~~~~~~~~~~~~~~~

  

* **Type**: :ref:`operand_dynamic <qbref_type_operand_dynamic>`
* **Extends**: :ref:`OperandDynamicFactory <qbref_node_operanddynamicfactory>`
* **Children**:
    * **1..1** :ref:`operand_dynamic <qbref_type_operand_dynamic>`

.. _qbref_node_select:

Select
~~~~~~

  

* **Type**: :ref:`select <qbref_type_select>`
* **Children**:
    * **0..*** :ref:`property <qbref_type_property>`

->field
^^^^^^^

Arguments:

* **$field**: Description of arg.

    

.. _qbref_node_sourcejoin:

SourceJoin
~~~~~~~~~~

  $from->joinInner()->left()->document()->

* **Type**: :ref:`source <qbref_type_source>`
* **Children**:
    * **1..1** :ref:`source_join_condition_factory <qbref_type_source_join_condition_factory>`
    * **1..1** :ref:`source_join_left <qbref_type_source_join_left>`
    * **1..1** :ref:`source_join_right <qbref_type_source_join_right>`

->left
^^^^^^

    "Left" source

->right
^^^^^^^

    "Right" source

->condition
^^^^^^^^^^^

    Join condition

.. _qbref_node_from:

From
~~~~

  

* **Type**: :ref:`from <qbref_type_from>`
* **Children**:
    * **1..1** :ref:`source <qbref_type_source>`

.. _qbref_node_querybuilder:

QueryBuilder
~~~~~~~~~~~~

  Base QueryBuilder node.

* **Type**: :ref:`builder <qbref_type_builder>`
* **Children**:
    * **0..*** :ref:`select <qbref_type_select>`
    * **1..1** :ref:`from <qbref_type_from>`
    * **0..1** :ref:`where <qbref_type_where>`
    * **0..*** :ref:`order_by <qbref_type_order_by>`

->where
^^^^^^^

    Where factory node is used to specify selection criteria:
    
.. code-block:: php
    
    <?php
         $qb->where()
           ->eq()->field('a.foobar')->literal('bar')->end()


->andWhere
^^^^^^^^^^

    Add additional selection criteria using the AND operator.

->orWhere
^^^^^^^^^

    Add additional selection criteria using the OR operator. 
    see "where"

->from
^^^^^^

    Set the from source for the query.
    
.. code-block:: php
    
    <?php
         $qb->from()->document('Foobar', 'a')
        
         // or with a join ...
        
         -$qb->from()->joinInner()
           ->left()->document('Foobar', 'a')->end()
           ->right()->document('Foobar', 'a')->end()
         ->end()


->fromDocument
^^^^^^^^^^^^^^

Arguments:

* **$documentFqn**: Description of arg.
* **$selectorName**: Description of arg.

    Shortcut for:
    
.. code-block:: php
    
    <?php
        $qb->from()->document('Foobar', 'a')->end()

    
    Which becomes:
    
.. code-block:: php
    
    <?php
        $qb->fromDocument('Foobar', 'a');

    
    Replaces any existing from source.

->addJoinLeftOuter
^^^^^^^^^^^^^^^^^^

    Replace the existing source with a left outer join source using the existing
    source as the left operand.
    
.. code-block:: php
    
    <?php
        $qb->fromDocument('Foobar', 'a')
        ->addJoinLeftOuter()
          ->right()->document('Barfoo', 'b')->end()
          ->condition()->equi('a.prop_1', 'b.prop_2')
        ->end();


->addJoinRightOuter
^^^^^^^^^^^^^^^^^^^

    Replace the existing source with a right outer join source using the existing
    source as the left operand.
    
.. code-block:: php
    
    <?php
        $qb->fromDocument('Foobar', 'a')
          ->addJoinRightOuter()
            ->right()->document('Barfoo', 'b')->end()
            ->condition()->equi('a.prop_1', 'b.prop_2')
          ->end()


->addJoinInner
^^^^^^^^^^^^^^

    Replace the existing source with an inner join source using the existing
    source as the left operand.
    
.. code-block:: php
    
    <?php
        $qb->fromDocument('Foobar', 'a')
        ->addJoinInner()
          ->right()->document('Barfoo', 'b')->end()
          ->condition()->equi('a.prop_1', 'b.prop_2')
        ->end()


->select
^^^^^^^^

    Method to add properties for selection to builder tree, replaces any 
    existing select.
    
    Number of property nodes is unbounded.
    
.. code-block:: php
    
    <?php
        $qb->select()
          ->field('a.prop_1')
          ->field('a.prop_2')
          ->field('a.prop_3')
        ->end()


->addSelect
^^^^^^^^^^^

    Add additional properties to selection.
    
.. code-block:: php
    
    <?php
        $qb->select()
            ->field('a.prop_1')
          ->end()
          ->addSelect()
            ->field('a.prop_2')
            ->field('a.prop_3')
            ->field('a.prop_4')
          ->end()


->orderBy
^^^^^^^^^

    Add orderings to the builder tree.
    
    Number of orderings is unbounded.
    
.. code-block:: php
    
    <?php
        $qb->orderBy()
            ->ascending()->field('a.prop_1')
            ->descending()->field('a.prop_2')
          ->end()


->addOrderBy
^^^^^^^^^^^^

    Add additional orderings to the builder tree.
    
    See "orderBy"

.. _qbref_node_constraintfactory:

ConstraintFactory
~~~~~~~~~~~~~~~~~

  

* **Type**: :ref:`constraint_factory <qbref_type_constraint_factory>`
* **Children**:
    * **1..1** :ref:`constraint <qbref_type_constraint>`

->andX
^^^^^^

    And composite constraint, usage

->orX
^^^^^

    Or composite constraint:
    
.. code-block:: php
    
    <?php
          $qb->where()
            ->orX()
              ->fieldExsts('prop_1', 'sel_1')
              ->fieldExsts('prop_2', 'sel_1')
            ->end()


->fieldExists
^^^^^^^^^^^^^

Arguments:

* **$field**: Description of arg.

    Field existance constraint:
    
.. code-block:: php
    
    <?php
          $qb->where()->fieldExists('prop_1', 'sel_1')


->fullTextSearch
^^^^^^^^^^^^^^^^

Arguments:

* **$field**: Description of arg.
* **$fullTextSearchExpression**: Description of arg.

    Full text search constraint:
    
.. code-block:: php
    
    <?php
          $qb->where()->fullTextSearch('sel_1.prop_1', 'search_expression')


->same
^^^^^^

Arguments:

* **$path**: Description of arg.
* **$selectorName**: Description of arg.

    Same document constraint:
    
.. code-block:: php
    
    <?php
          $qb->where()->sameDocument('/path/to/doc', 'sel_1')

    
    Relates to PHPCR SameNodeInterface

->descendant
^^^^^^^^^^^^

Arguments:

* **$ancestorPath**: Description of arg.
* **$selectorName**: Description of arg.

    Descendant document constraint:
    
.. code-block:: php
    
    <?php
          $qb->where()->descendantDocument('/ancestor/path', 'sel_1')

    
    Relates to PHPCR DescendantNodeInterface

->child
^^^^^^^

Arguments:

* **$parentPath**: Description of arg.
* **$selectorName**: Description of arg.

    Child document constraint:
    
.. code-block:: php
    
    <?php
          $qb->where()->child('/parent/path', 'sel_1')

    
    
    Relates to PHPCR ChildNodeInterface

->not
^^^^^

    Not constraint.
    
    Inverts the truth of any given constraint:
    
.. code-block:: php
    
    <?php
          $qb->where()->not()->fieldExists('sel_1.foobar')


->eq
^^^^

    Equality comparison constraint
    
.. code-block:: php
    
    <?php
          $qb->where()
            ->eq()
              ->field('sel_1.foobar')->end()
              ->bindVariable('var_1')->end()
            ->end()


->neq
^^^^^

    Inequality comparison constraint
    
.. code-block:: php
    
    <?php
          $qb->where()
            ->neq()
              ->field('sel_1.foobar')->end()
              ->bindVariable('var_1')->end()
            ->end()


->lt
^^^^

    Less than comparison constraint
    
.. code-block:: php
    
    <?php
          $qb->where()
            ->lt()
              ->field('sel_1.foobar')->end()
              ->literal(5)->end()
            ->end()


->lte
^^^^^

    Less than or equal to comparison constraint
    
.. code-block:: php
    
    <?php
          $qb->where()
            ->lte()
              ->field('sel_1.foobar')->end()
              ->literal(5)->end()
            ->end()


->gt
^^^^

    Greater than comparison constraint
    
.. code-block:: php
    
    <?php
          $qb->where()
            ->gt()
              ->field('sel_1.foobar')->end()
              ->literal(5)->end()
            ->end()


->gte
^^^^^

    Greater than or equal to comparison constraint
    
.. code-block:: php
    
    <?php
        $qb->where()
          ->gte()
            ->field('sel_1.foobar')->end()
            ->literal(5)->end()
          ->end()


->like
^^^^^^

    Like comparison constraint
    
.. code-block:: php
    
    <?php
          $qb->where()
            ->lt()
              ->field('sel_1.foobar')->end()
              ->literal('foo%')->end()
            ->end()


.. _qbref_node_operandstaticfactory:

OperandStaticFactory
~~~~~~~~~~~~~~~~~~~~

  Factory/node class for static operands.
  
  As the name suggests, static operand values do
  not change once initialized and are used as the "right hand
  side" operands in comparisons.
  
  Inherits from dynamic factory, see note there.

* **Type**: :ref:`operand_static_factory <qbref_type_operand_static_factory>`
* **Extends**: :ref:`OperandFactory <qbref_node_operandfactory>`
* **Children**:
    * **1..1** :ref:`operand_static <qbref_type_operand_static>`

.. _qbref_node_constraintnot:

ConstraintNot
~~~~~~~~~~~~~

  

* **Type**: :ref:`constraint <qbref_type_constraint>`
* **Extends**: :ref:`ConstraintFactory <qbref_node_constraintfactory>`
* **Children**:
    * **1..1** :ref:`constraint <qbref_type_constraint>`

.. _qbref_node_operanddynamicuppercase:

OperandDynamicUpperCase
~~~~~~~~~~~~~~~~~~~~~~~

  

* **Type**: :ref:`operand_dynamic <qbref_type_operand_dynamic>`
* **Extends**: :ref:`OperandDynamicFactory <qbref_node_operanddynamicfactory>`
* **Children**:
    * **1..1** :ref:`operand_dynamic <qbref_type_operand_dynamic>`

.. _qbref_node_ordering:

Ordering
~~~~~~~~

  

* **Type**: :ref:`ordering <qbref_type_ordering>`
* **Extends**: :ref:`OperandDynamicFactory <qbref_node_operanddynamicfactory>`
* **Children**:
    * **1..1** :ref:`operand_dynamic <qbref_type_operand_dynamic>`

.. _qbref_node_operandfactory:

OperandFactory
~~~~~~~~~~~~~~

  Factory/node class for dynamic all operands.
  
  Extends OperandDynamicFactory, and adds the static operands.
  
  Traits would be really useful here.

* **Type**: :ref:`operand_dynamic_factory <qbref_type_operand_dynamic_factory>`
* **Extends**: :ref:`OperandDynamicFactory <qbref_node_operanddynamicfactory>`
* **Children**:
    * **1..1** :ref:`operand_dynamic <qbref_type_operand_dynamic>`

->parameter
^^^^^^^^^^^

Arguments:

* **$name**: Description of arg.

    Static operand: Resolves to the value of the variable bound to the given $name
    
    Relates to PHPCR BindVariableValueInterface

->literal
^^^^^^^^^

Arguments:

* **$value**: Description of arg.

    Static operand: Resolves to the given literal value

.. _qbref_node_constraintcomparison:

ConstraintComparison
~~~~~~~~~~~~~~~~~~~~

  

* **Type**: :ref:`constraint <qbref_type_constraint>`
* **Extends**: :ref:`OperandFactory <qbref_node_operandfactory>`
* **Children**:
    * **1..1** :ref:`operand_dynamic <qbref_type_operand_dynamic>`
    * **1..1** :ref:`operand_static <qbref_type_operand_static>`

.. _qbref_node_sourcejoinright:

SourceJoinRight
~~~~~~~~~~~~~~~

  

* **Type**: :ref:`source_join_right <qbref_type_source_join_right>`
* **Extends**: :ref:`From <qbref_node_from>`
* **Children**:
    * **1..1** :ref:`source <qbref_type_source>`

.. _qbref_node_sourcejoinleft:

SourceJoinLeft
~~~~~~~~~~~~~~

  

* **Type**: :ref:`source_join_left <qbref_type_source_join_left>`
* **Extends**: :ref:`From <qbref_node_from>`
* **Children**:
    * **1..1** :ref:`source <qbref_type_source>`

.. _qbref_node_whereand:

WhereAnd
~~~~~~~~

  Append an additional "where" with an AND

* **Type**: :ref:`where <qbref_type_where>`
* **Extends**: :ref:`Where <qbref_node_where>`
* **Children**:
    * **1..1** :ref:`constraint <qbref_type_constraint>`

.. _qbref_node_constraintorx:

ConstraintOrx
~~~~~~~~~~~~~

  

* **Type**: :ref:`constraint <qbref_type_constraint>`
* **Extends**: :ref:`ConstraintFactory <qbref_node_constraintfactory>`
* **Children**:
    * **2..2** :ref:`constraint <qbref_type_constraint>`

.. _qbref_node_constraintandx:

ConstraintAndx
~~~~~~~~~~~~~~

  

* **Type**: :ref:`constraint <qbref_type_constraint>`
* **Extends**: :ref:`ConstraintFactory <qbref_node_constraintfactory>`
* **Children**:
    * **2..2** :ref:`constraint <qbref_type_constraint>`
